//////////////////set up camera/////////////////////////
					   Vector3f camPos(8.0, 5.0, 20.0);
					   Vector3f target(2.0, 5.0, -1.0);
					   Vector3f up(0, 1.0, 0.0);
					   Projection *camera = new Projection(camPos, target, up, new Regular(16, 1));
					   camera->setOffset(Color(0.1, 0.1, 0.1));
					   //////////////////set up scene/////////////////////////
					   scene = new Scene(ViewPlane(width, height, 1.0), Color(0.5, 0.5, 0.5));
					   scene->setDepth(1.0);
					   //////////////////set up light/////////////////////////
					   scene->addLight(new Light(Vector3f(0, 8, -100), Color(0.1, 0.1, 0.1), Color(1.8, 1.8, 1.8), Color(0.8, 0.8, 0.8)));
					   //scene->addLight(new Light(Vector3f(0, 8, 100), Color(0.1, 0.1, 0.1), Color(0.8, 0.8, 0.8), Color(0.8, 0.8, 0.8)));
					   scene->addLight(new Light(Vector3f(60, 100, 100), Color(0.1, 0.1, 0.1), Color(0.8, 0.8, 0.8), Color(0.8, 0.8, 0.8)));
					   //////////////////set up objects/////////////////////////
					   Reflective *reflective = new Reflective();
					   reflective->setReflectionColor(1.0);
					   reflective->setFrensel(0.4);
					  
					   primitive::Rectangle* mirror = new primitive::Rectangle(Vector3f(-20.0, 0.0, -5.0), Vector3f(40.0, 0.0, 0.0), Vector3f(0.0, 20.0, 0.0));
					   mirror->setColor(Color(0.4, 0.4, 0.4));
					   mirror->setMaterial(reflective);

					   RectangleChecker* rectangleChecker = new RectangleChecker();
					   rectangleChecker->setNumXCheckers(4);
					   rectangleChecker->setNumZCheckers(4);
					   rectangleChecker->setXLineWidth(0.0);
					   rectangleChecker->setZLineWidth(0.0);
					   rectangleChecker->setColor1(Color(1.0, 1.0, 1.0));
					   rectangleChecker->setColor2(Color(0.0, 0.0, 0.0));
					   rectangleChecker->setLineColor(Color(1.0, 1.0, 0.0));
					   rectangleChecker->setMapping(new RectangularMap(Vector3f(-20.0, 0.0, -5.0), Vector3f(40.0, 0.0, 0.0), Vector3f(0.0, 0.0, 30.0)));

					   primitive::Rectangle* bottom = new primitive::Rectangle(Vector3f(-20.0, 0.0, -5.0), Vector3f(40.0, 0.0, 0.0), Vector3f(0.0, 0.0, 30.0));
					   bottom->setColor(Color(0.4, 0.4, 0.4));
					   bottom->setMaterial(new Phong(Color(0.5, 0.5, 0.5), Color(0.8, 0.8, 0.8), Color(1.0, 1.0, 1.0), 50));
					   bottom->setTexture(rectangleChecker);

					   ImageTexture *normalTexture = new ImageTexture("textures/rockwall_n.bmp");
					   normalTexture->setUVScale(2.0, 0.5);

					   Phong *phong = new  Phong(Color(0.5, 0.5, 0.5), Color(0.8, 0.8, 0.8), Color(0.3, 0.3, 0.3), 20);
					   phong->setNormalTexture(normalTexture);

					   Reflective *reflective2 = new Reflective();
					   reflective2->setReflectionColor(1.0);
					   reflective2->setFrensel(0.8);
					   reflective2->setNormalTexture(normalTexture);

					   MeshTorus *meshTorus = new MeshTorus(4.0, 1.0);
					   meshTorus->buildMesh();
					   meshTorus->setColor(Color(0.4, 0.3, 0.6));
					   meshTorus->setMaterial(reflective2);

					   Instance *instanceMesh = new Instance(meshTorus);
					   instanceMesh->rotate(Vector3f(1.0, 0.0, 0.0), 90);
					   instanceMesh->translate(-5.0, 5.0, 0.0);

					   Torus *torus = new Torus(4.0, 1.0);
					   torus->setColor(Color(0.7, 0.1, 0.5));
					   torus->setMaterial(phong);

					   Instance *instanceTorus = new Instance(torus);
					   instanceTorus->rotate(Vector3f(1.0, 0.0, 0.0), 90);
					   instanceTorus->translate(7.0, 5.0, 0.0);

					   scene->addPrimitive(mirror);
					   scene->addPrimitive(bottom);
					   scene->addPrimitive(instanceMesh);
					   scene->addPrimitive(instanceTorus);

					   camera->renderScene(*scene);

					   InvalidateRect(hWnd, 0, true);

					   return 0;
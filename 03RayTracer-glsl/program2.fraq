#version 410 core
//precision highp float;
//precision mediump float;
#define PI 3.1415926535897932384

uniform vec3 u_campos;
uniform vec3 u_viewdir;
uniform vec3 u_camright;
uniform vec3 u_camup;
uniform float u_resx;
uniform float u_resy;
uniform float u_aspectRatio;
uniform float u_scale;
uniform float u_time;



struct Torus{
	float a; // distance from the center of the hole inside and the center of its tube
	float b; // radius of th tube
	vec4 color;
};

struct Ray{
	vec4	origin;
	vec4	direction;
};



mat4 rotate(vec3 axis, float degrees){
	
	float rad = (degrees*PI)/180.0;
	float x	  = axis.x;
	float y	  = axis.y;
	float z	  = axis.z;
	float c	  = cos(rad);
	float s   = sin(rad);
	
	return mat4(
	(x*x)*(1.0-c) + c    , (x*y)*(1.0-c) - (z*s) , (z*x)*(1.0-c) + (y*s) , 0.0 ,
	(x*y)*(1.0-c) + (z*s), (y*y)*(1.0-c) + c	 , (z*y)*(1.0-c) - (x*s) , 0.0 ,
	(x*z)*(1.0-c) - (y*s), (y*z)*(1.0-c) + (x*s) , (z*z)*(1.0-c) + c     , 0.0 ,
	 0.0				 ,  0.0				 	 ,  0.0					 , 1.0
	);
}

mat4 shear(float hxy, float hxz, float hyx, float hyz, float hzx, float hzy){

float D = 1- (hxy*hyx) - (hxz*hzx) - (hyz*hzy) + (hxy*hyz*hzx) + (hxz*hyx*hzy);

return mat4(
	1-(hyz*hzy)      , -hyx + (hyz*hzx) , -hzx + (hyx*hzy)   , 0.0 ,
	-hxy + (hxz*hzy) , 1 - (hxz*hzx)  	, -hzy + (hxy*hzx)   , 0.0 ,
	-hxz + (hxy*hyz) , -hyz + (hxz*hyx) , 1 - (hxy*hyx)    	 , 0.0 ,
	 0.0		     ,  0.0			    , 0.0			     , D
	)*1.0/D;

}


mat4 translate(float dx, float dy, float dz){

	return mat4(
	1.0 , 0.0 , 0.0 , -dx ,
	0.0 , 1.0 , 0.0 , -dy ,
	0.0 , 0.0 , 1.0 , -dz ,
	0.0 , 0.0 , 0.0 , 1.0
	);
}

mat4 scale(float a, float b, float c){

	return mat4(
	1.0/a , 0.0   , 0.0   , 0.0 ,
	0.0   , 1.0/b , 0.0   , 0.0 ,
	0.0   , 0.0   , 1.0/c , 0.0 ,
	0.0   , 0.0   , 0.0   , 1.0
	);
}


// f(x) = (|x|² + R² - r²)² - 4·R²·|xy|² = 0

bool RayTorusIntersection(Ray ray,    Torus torus )
{
	float Ra2 = torus.a*torus.a;
	float ra2 = torus.b*torus.b;
	
	
	float m = dot(ray.origin.xyz, ray.origin.xyz);
	float n = dot(ray.origin.xyz, ray.direction.xyz );
	float o = 	dot(ray.direction.xyz, ray.direction.xyz );
		
	float k = (m - ra2 - Ra2)/2.0;
	float a = n;												//J t^4
	float b = n*n + Ra2*ray.direction.x*ray.direction.x + k;
	float c = k*n + Ra2*ray.origin.x*ray.direction.x;			//c_1
	float d = k*k + Ra2*ray.origin.x*ray.origin.x - Ra2*ra2;	//c_0
	
    //----------------------------------

	float p = -3.0*a*a     + 2.0*b;
	float q =  2.0*a*a*a   - 2.0*a*b   + 2.0*c;
	float r = -3.0*a*a*a*a + 4.0*a*a*b - 8.0*a*c + 4.0*d;
	p /= 3.0;
	r /= 3.0;
	float Q = p*p + r;
	float R = 3.0*r*p - p*p*p - q*q;
	
	float h = R*R - Q*Q*Q;
	float z = 0.0;
	
	// discriminant > 0
	if( h < 0.0 )
	{
		float sQ = sqrt(Q);
		z = 2.0*sQ*cos( acos(R/(sQ*Q)) / 3.0 );
	}
	// discriminant < 0
	else
	{
		float sQ = pow( sqrt(h) + abs(R), 1.0/3.0 );
		if (R < 0.0){
			z = -(sQ + Q / sQ);
		}
		else{
			z = (sQ + Q / sQ);
		}
	}
	
	z = p - z;
	
    //----------------------------------
	
	float d1 = z   - 3.0*p;
	float d2 = z*z - 3.0*r;
	float d1o2 = d1/2.0;
	
	
	if( abs(d1)< EPSILON )
	{
		
		d2 = sqrt(d2);
	}
	else
	{
		
		d1 = sqrt( d1/2.0 );
		d2 = q/d1;
	}

    //----------------------------------
	
	float result = -1.0;
	float result2 = -1.0;
	
	float t1;
	float t2;
	
	
	h = d1o2 - z + d2;
	if( h>0.0 )
	{
		h = sqrt(h);
		
		t1 = -d1 - h - a;
		t2 = -d1 + h - a;
		
		if(t1 > 0.0 && t2 > 0.0) {
			result = min(t1,t2);
		}else if(t1 > 0) {
			result = t1;
		}
		else if(t2 > 0){ 
			result = t2;
		}
		     
	}

	
	h = d1o2 - z - d2;
	if( h>0.0 )
	{
		h = sqrt(h);
		t1 = d1 - h - a;
		t2 = d1 + h - a;
		
		if(t1 > 0.0 && t2 > 0.0) {
			result2 = min(t1,t2);
		}else if(t1 > 0) {
			result2 = t1;
		}
		else if(t2 > 0){ 
			result2 = t2;
		}
	}
	
	if(result2 > 0.0 && result > 0.0 ){
		result = min(result, result2);
	
	}else if (result2 > 0.0) result = result2;
	
	
	
	if(result > 0.0) return true;
	
	return false;
}




vec4 ProjectionMap(vec2 uv){

float xamnt = (uv.x+0.5)/u_resx;
float yamnt = (uv.y+0.5)/u_resy;


return vec4(u_viewdir + u_aspectRatio*u_scale*(2.0*xamnt-1.0)*u_camright + (2.0*yamnt-1.0)*u_scale*u_camup,1.0);
}


Ray ray;
Torus torus;


void main(void)
{
		
	
    torus.a = 1.0;
	torus.b	= 0.5;
	 
	
	
	ray.origin =  vec4(u_campos,1.0);
	
	//ray.origin = u_campos;
	ray.direction = ProjectionMap(gl_FragCoord.xy);
	
	mat4 trafo2 = rotate(vec3(0.0,1.0,0.0), u_time );
	mat4 trafo3 = translate(0.5,0.5,0.0);
	mat4 T = trafo2;
	
	
	ray.origin = ray.origin* T ;
	ray.direction =  ray.direction * T;
	
	ray.direction = vec4(normalize(ray.direction.xyz), 1.0);
	

	vec3 col = vec3(0.0);
	if( RayTorusIntersection( ray,  torus )  )
	{
		col = vec3(0.2,0.3,0.4);
		
	}
	gl_FragColor = vec4( col, 1.0 );
	
	
}

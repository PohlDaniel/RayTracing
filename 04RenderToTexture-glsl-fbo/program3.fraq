#version 410 core

uniform float u_time;
uniform int u_resx;
uniform int u_resy;

#define STEPS 64
#define EPS 0.01
#define FAR 10.0
#define PI 3.14159265359





float map(vec3 p) {
    float v = 2.5*u_time;
    float r = 1.35 + 0.15*cos(10.0*p.y + v) + 0.15*cos(10.0*p.x + v);
    return length(p) - r;
}

vec3 grad(vec3 p) {
    vec2 q = vec2(0.0, EPS);
    return vec3(map(p + q.yxx) - map(p - q.yxx),
                map(p + q.xyx) - map(p - q.xyx),
                map(p + q.xxy) - map(p - q.xxy));
}

vec3 shade(vec3 ro, vec3 rd, float t) {
	vec3 n = normalize(grad(ro + t*rd));
    return vec3(0.3, 0.5, 0.7)*pow(1.0-dot(-rd, n), 1.5);
}




void main(void ) {

 vec2 uv = 2.0*(  gl_FragCoord.xy/vec2(u_resx, u_resy)- vec2(1.0,1.0) );
	
    vec3 ro = vec3(0.0, 0.0, 2.5); // inÃ­cio do raio.
    vec3 rd = normalize(vec3(uv, -1.0)); // direÃ§Ã£o do raio.
    
    // Loop do raymarcher.
    float t = 0.0, d = EPS;
    for (int i = 0; i < STEPS; ++i) {
        d = map(ro + t*rd);
        if (d < EPS || t > FAR) break;
        t += d;
    }

    // Shading.
    vec3 col = d < EPS ? shade(ro, rd, t) : mix(vec3(0.0), vec3(0.3, 0.5, 0.7), 2.0-length(uv)) ;
    
    // PÃ³s-processamento. 
    col = smoothstep(0.0, 1.0, col);
    col = pow(col, vec3(0.45));
    
	gl_FragColor = vec4(col,1.0);
  
}
